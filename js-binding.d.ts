/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum RegistryType {
  RegNone = 'RegNone',
  RegSz = 'RegSz',
  RegExpandSz = 'RegExpandSz',
  RegBinary = 'RegBinary',
  RegDword = 'RegDword',
  RegDwordBigEndian = 'RegDwordBigEndian',
  RegLink = 'RegLink',
  RegMultiSz = 'RegMultiSz',
  RegResourceList = 'RegResourceList',
  RegFullResourceDescriptor = 'RegFullResourceDescriptor',
  RegResourceRequirementsList = 'RegResourceRequirementsList',
  RegQword = 'RegQword'
}
export interface RegistryItemValue {
  name: string
  value: Buffer
  vtype: RegistryType
}
export interface RegistryItem {
  exists: boolean
  path: string
  keys: Array<string>
  values: Array<RegistryItemValue>
}
export interface RegisteryItemPutValue {
  name: string
  value: Buffer
  vtype: RegistryType
}
export interface RegisteryItemPut {
  path: string
  values: Array<RegisteryItemPutValue>
}
export function list(path: string): Promise<RegistryItem>
export function listAll(paths: Array<string>): Promise<Array<RegistryItem>>
export function create(path: string): Promise<void>
export function createAll(paths: Array<string>): Promise<void>
export function put(registeryPut: RegisteryItemPut): Promise<void>
export function putAll(registeryPuts: Array<RegisteryItemPut>): Promise<void>
export function deleteKey(path: string): Promise<void>
export function deleteAllKeys(paths: Array<string>): Promise<void>
